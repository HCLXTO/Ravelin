/* GLOBAL */
const START_DIMENSION = {"Width":String(window.innerWidth), 
                         "Height":String(window.innerHeight)}
const SESSION_ID = getSessionId()
let FIRST_PRESS

/* REPORT FUNCTIONS */

// Sends the resize event (start and end dimention) to the app
const resize = do_once(function(){
   let end_dimension = {"Width":String(window.innerWidth), 
                        "Height":String(window.innerHeight)}
   
   let event = {"eventType": "screenResize",
                "websiteUrl": window.location.href,
                "sessionId": SESSION_ID,
                "resizeFrom": START_DIMENSION,
                "resizeTo": end_dimension}
   
   postData("/screenResize", event)
   .then(function(data){
      console.log(JSON.stringify(data))
   })
   .catch(error => console.error(error))
})

// Register the first press time to calculate the time taken
const registerFirstPress = do_once(function(){
   FIRST_PRESS = new Date()
})

// Sends the timeTaken event to the server
const pressSubmit = do_once(function(e){
   e.preventDefault()
   let form = this
   let secs = 0
   if (FIRST_PRESS) {
      let submit_time = new Date()
      secs = Math.round((submit_time.getTime()-FIRST_PRESS.getTime())/1000)
   }
   let event = {"eventType": "timeTaken",
                "websiteUrl": window.location.href,
                "sessionId": SESSION_ID,
                "time": secs}

   postData("/timeTaken", event)
   .then(function(data){
      //console.log(JSON.stringify(data))
      form.submit()
   })
   .catch(error => console.error(error))
})

// Sends the copy&paste event to the server
function pasteToInput(e){
   let event = {"eventType": "copyAndPaste",
                "websiteUrl": window.location.href,
                "sessionId": SESSION_ID,
                "pasted": true,
                "formId": e.target.id}

   postData("/copyAndPaste", event)
   .then(function(data){
      console.log(JSON.stringify(data))
   })
   .catch(error => console.error(error))
}

/* UTIL FUNCTIONS */

// Sends a POST request to the inputed URL with the inputed DATA
function postData(url = ``, data = {}) {
   return fetch(url, {
      method: "POST", // *GET, POST, PUT, DELETE, etc.
      mode: "cors", // no-cors, cors, *same-origin
      cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
      headers: {
         "Content-Type": "application/json; charset=utf-8"
      },
      redirect: "follow", // manual, *follow, error
      referrer: "no-referrer", // no-referrer, *client
      body: JSON.stringify(data)
   })
   .then(function(response){
      if(response.status == 200){
         return response.json()
      }else{
         console.log("Error posting monitoring data.")
         console.log("Status:"+response.status+", "+response.statusText)
         console.log(response)
      }
   })
}

// Generates a random sessionId - For the context of this test
// I am assuming the session Id to be generated by another part
// of the system, so I'm considering a random ID for the session
function getSessionId(){
   return getRand(6)+"-"+getRand(6)+"-"+getRand(9)
}

// Generate a string with n random numbers
function getRand(num = 1){
   if (num <= 0) num = 1
   res = ""
   for (var i = num- 1; i >= 0; i--) {
      res += String(Math.floor(Math.random() * 10))
   }
   return res
}

// Set timer when is called, avoiding sequential calls of func
function debounce(func, time =  100) {
   let timer
   return function(event){
      if(timer) clearTimeout(timer)
      timer = setTimeout(func, time, event)
   }
}

// Wrapper to execute a function only once
function do_once(fn, context) { 
   var result;
   return function() { 
      if (fn) {
         result = fn.apply(context || this, arguments)
         fn = null;
      }
      return result;
   };
}

/* SETTING EVENT LISTENERS */

// Runs after the DOM is complete
document.addEventListener("DOMContentLoaded", function() {

   window.onresize = debounce(resize, 500)
   
   inputs = document.querySelectorAll('.form-control')
   for (var i = inputs.length - 1; i >= 0; i--) {
      inputs[i].addEventListener('keydown', registerFirstPress)
      inputs[i].addEventListener('paste', (e) => {
         //console.log(e);
         window.setTimeout(() => {
            pasteToInput(e)
         })
      })
   }

   submit = document.querySelectorAll('form')
   for (var i = submit.length - 1; i >= 0; i--) {
      submit[i].addEventListener('submit', pressSubmit)
   }

});



